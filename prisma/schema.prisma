// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
    id              String      @id @default(uuid())
    username        String
    email           String
    password        String?
    createdAt       DateTime @default(now())
    // conversation    Chat[]
    lastOnline      DateTime @default(now())
    posts           Post[]
    accountType     String
    filterableUserAttributes  FilterableUserAttributes?
    filters         Filters[]
    userChats       UserChat[]
}

model Filters {
    id              Int       @id @default(autoincrement())
    userId          String                    
    user            User      @relation(fields: [userId], references: [id])
    filterOff       Boolean?
    filterableUserAttributes  FilterableUserAttributes?
    filterablePostAttributes  FilterablePostAttributes[]
}

model FilterableUserAttributes {
    id              Int     @id @default(autoincrement())
    age             Int?
    gender          String?
    ethnicity       String?
    personalityType String?
    userId          String?     @unique
    user            User?    @relation(fields: [userId], references: [id])
    filtersId       Int?   @unique
    filters         Filters?   @relation(fields: [filtersId], references: [id])
}


model Post {
    id                  Int                    @id @default(autoincrement())
    userId              String                    
    user                User                   @relation(fields: [userId], references: [id])
    title               String
    description         String?
    image               String?
    createdAt           DateTime               @default(now())
    filterablePostAttributes  FilterablePostAttributes?
}

model FilterablePostAttributes {
    id              Int     @id @default(autoincrement())
    postFilterDisplay   String?
    postFilterQueryRole      String?
    mood                String?
    postId          Int?     @unique
    post            Post?    @relation(fields: [postId], references: [id])
    filtersId       Int?      @unique
    filters         Filters?   @relation(fields: [filtersId], references: [id])
}

model UserChat {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  joinedAt  DateTime @default(now())  
  @@unique([userId, chatId])
}

model Chat {
  id            String      @id @default(uuid())
  name          String?
  // userId        String
  userChats     UserChat[]
  messages      Message[]
  // user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Message {
  id              Int      @id @default(autoincrement())
  text            String
  createdAt       DateTime @default(now())
  userName        String
  userId          String
  chat            Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String
}