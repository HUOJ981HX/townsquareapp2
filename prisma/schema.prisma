// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
    id              Int      @id @default(autoincrement())
    publicId        String
    username        String
    email           String
    password        String?
    createdAt       DateTime @default(now())
    messages        Message[]
    userConversations UserConversation[]
    lastOnline      DateTime @default(now())
    posts           Post[]
    accountType     String
    userAttributes  UserAttributes?
}

model UserAttributes {
    id              Int     @id @default(autoincrement())
    age             Int?
    gender          String?
    description     String?
    friendship      String?
    job             String?
    collaboration   String?
    help            String?
    userId          Int     @unique
    user            User    @relation(fields: [userId], references: [id])
    relationship    Relationship?
}

model Relationship {
    id                  Int     @id @default(autoincrement())
    userAttributesId    Int     @unique
    userAttributes      UserAttributes @relation(fields: [userAttributesId], references: [id])
    description         String
    openTo              String
}

model Post {
    id                  Int                    @id @default(autoincrement())
    userId              Int                    
    user                User                   @relation(fields: [userId], references: [id])
    title               String
    description         String?
    image               String?
    createdAt           DateTime               @default(now())
    mood                String?
}

model Conversation {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  messages   Message[]
  userConversations UserConversation[]
}

model Message {
  id              Int      @id @default(autoincrement())
  content         String
  createdAt       DateTime @default(now())
  senderId        Int
  conversationId  Int
  sender          User     @relation(fields: [senderId], references: [id])
  conversation    Conversation @relation(fields: [conversationId], references: [id])
}

model UserConversation {
  userId         Int
  conversationId Int
  joinedAt       DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([userId, conversationId])
}